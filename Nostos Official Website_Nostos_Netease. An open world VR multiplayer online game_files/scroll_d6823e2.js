var Operate = function (e) { function t(e, t) { return Math.sqrt((e.x - t.x) * (e.x - t.x) + (e.y - t.y) * (e.y - t.y)) } var o = "ontouchend" in document ? "touch" : "mouse", s = !1; if ("touch" == o) try { var i = Object.defineProperty({}, "passive", { get: function () { s = !0 } }); e.addEventListener("test", null, i) } catch (l) { } var r = function (e, s) { if (s.delta = {}, s.isDown = !0, "touch" == o) if (1 == e.touches.length) { var i = e.touches[0]; s.delta = { x: 0, y: 0 }, s.startP = { x: i.pageX, y: i.pageY, time: new Date }, s.currentP = { x: i.pageX, y: i.pageY, time: new Date } } else 2 == e.touches.length && (s.isZoom = !0, s.startP = { x: [e.touches[0].pageX, e.touches[1].pageX], y: [e.touches[0].pageY, e.touches[1].pageY], distance: t({ x: e.touches[0].pageX, y: e.touches[0].pageY }, { x: e.touches[1].pageX, y: e.touches[1].pageY }), time: new Date }, s.delta = { x: [0, 0], y: [0, 0], distance: 0 }); else s.startP = { x: e.pageX, y: e.pageY, time: new Date }, s.currentP = { x: e.pageX, y: e.pageY, time: new Date }, s.delta = { x: 0, y: 0 }; s.onStart(e, s) }, c = function (e, o) { "touch" == o.ctrlMode ? 1 == e.touches.length ? (o.isDown && !o.isZoom && (o.startP || (o.startP = { x: e.touches[0].pageX, y: e.touches[0].pageY, time: new Date }), o.delta = { x: e.touches[0].pageX - o.startP.x, y: e.touches[0].pageY - o.startP.y }), o.currentP = { x: e.touches[0].pageX, y: e.touches[0].pageY, time: new Date }, o.onMove(e, o)) : 2 == e.touches.length && (o.isDown && o.isZoom && (o.currentP = { x: [e.touches[0].pageX, e.touches[1].pageX], y: [e.touches[0].pageY, e.touches[1].pageY], distance: t({ x: e.touches[0].pageX, y: e.touches[0].pageY }, { x: e.touches[1].pageX, y: e.touches[1].pageY }), time: new Date }, o.delta = { x: [e.touches[0].pageX - o.startP.x[0], e.touches[1].pageX - o.startP.x[1]], y: [e.touches[0].pageY - o.startP.y[0], e.touches[1].pageY - o.startP.y[1]], distance: o.currentP.distance - o.startP.distance }), o.onMove(e, o)) : (o.isDown && (o.startP || (o.startP = { x: e.pageX, y: e.pageY, time: new Date }), o.delta = { x: e.pageX - o.startP.x, y: e.pageY - o.startP.y }), o.currentP = { x: e.pageX, y: e.pageY, time: new Date }, o.onMove(e, o)) }, n = function (e, t) { "touch" == o || (t.currentP = { x: e.pageX, y: e.pageY, time: new Date }), t.isDown = !1, t.isZoom = !1, t.onEnd(e, t) }, a = function (e, t) { t.onWheel(e, t) }, h = function (e, t) { t.onOut(e, t) }, p = function (t) { this.delta = {}, this.startP = {}, this.currentP = {}, this.isDown = !1, this.isZoom = !1, this.ctrlMode = o; var i = t.container; this.onStart = t.onStart || function () { }, this.onMove = t.onMove || function () { }, this.onEnd = t.onEnd || function () { }, this.onWheel = t.onWheel || function () { }, this.onOut = t.onOut || function () { }, this.handleEvent = function (e) { switch (e.type) { case "touchstart": r(e, this); break; case "touchmove": c(e, this); break; case "touchend": n(e, this); break; case "mouseleave": n(e, this); break; case "mousedown": r(e, this); break; case "mousemove": c(e, this); break; case "mouseup": n(e, this); break; case "mouseout": h(e, this); break; case "mousewheel": a(e, this); break; case "DOMMouseScroll": a(e, this) } }, "touch" == this.ctrlMode ? (i.addEventListener("touchstart", this, s ? { passive: !1 } : !1), i.addEventListener("touchmove", this, s ? { passive: !1 } : !1), i.addEventListener("touchend", this, s ? { passive: !1 } : !1)) : (i.addEventListener("mousedown", this, !1), i.addEventListener("mousemove", this, !1), i.addEventListener("mouseup", this, !1), i.addEventListener("mouseleave", this, !1), i.addEventListener("mouseout", this, !1), e.addEventListener("mousewheel", this, !1), e.addEventListener("DOMMouseScroll", this, !1)) }; return { create: function (e) { return new p(e) } } }(window, document, void 0), Scroller = function (e) { var t = this; this.curScrollTop = 0, this.scrollTopTemp = 0, this.orient = e.orient || "vert", this.container = $(e.container)[0], this.scrollBody = $(this.container).find(".metro-wrapper")[0], this.onScrollEnd = e.onScrollEnd || function () { }, this.onScroll = e.onScroll || function () { }, this.scrollerBar = document.createElement("div"), this.scrollerBar.className = "metro-scorller", this.scrollerHandle = document.createElement("div"), this.scrollerHandle.className = "metro-scroller-handle", this.scrollerBar.appendChild(this.scrollerHandle), this.container.appendChild(this.scrollerBar), this.scrollSize = 0, this.clientSize = 0; var o = 0; this.handleSize = 0, this.scrollerBarSize = 0; { var s = !1, i = 0; Operate.create({ container: t.container, onStart: function (e, o) { if ($(e.target).hasClass("metro-scroller-handle")) s = !0, i = t.curScrollTop; else if ($(e.target).hasClass("metro-scorller")) { if ("vert" == t.orient) var l = o.startP.y, r = $(t.scrollerHandle).offset().top; else var l = o.startP.x, r = $(t.scrollerHandle).offset().left; var c = (l - r - t.handleSize / 2) / (t.scrollerBarSize - t.handleSize) * (t.scrollSize - t.clientSize); t.addScrollTop(c) } }, onMove: function (e, o) { if (s) { var l = o.delta.y; t.scrollTopTemp = l / (t.scrollerBarSize - t.handleSize) * (t.scrollSize - t.clientSize) + i, t.scrollTopTemp < 0 && (t.scrollTopTemp = 0), t.scrollTopTemp > t.scrollSize - t.clientSize && (t.scrollTopTemp = t.scrollSize - t.clientSize), t.curScrollTop = t.scrollTopTemp } }, onOut: function () { }, onEnd: function () { s = !1 } }) } this.update = function (e) { t.scrollSize = "vert" == t.orient ? t.scrollBody.offsetHeight : t.scrollBody.offsetWidth, t.clientSize = "vert" == t.orient ? t.container.offsetHeight : t.container.offsetWidth, t.scrollerBarSize = "vert" == t.orient ? t.scrollerBar.offsetHeight - 4 : t.scrollerBar.offsetWidth - 2, t.handleSize = t.clientSize / t.scrollSize * t.scrollerBarSize, e ? (this.scrollTopTemp = o * (this.scrollSize - this.clientSize), this.scrollTopTemp < 0 && (this.scrollTopTemp = 0), this.scrollTopTemp > this.scrollSize - this.clientSize && (this.scrollTopTemp = this.scrollSize - this.clientSize, this.onScrollEnd()), t.curScrollTop = this.scrollTopTemp) : this.scrollSize > this.clientSize && (o = t.curScrollTop / (t.scrollSize - t.clientSize)), "vert" == t.orient ? (t.container.scrollTop = t.curScrollTop, t.scrollerHandle.translate3d(0, -(o * t.scrollSize) + "px", 0), t.scrollerHandle.style.height = t.handleSize + "px") : (t.scrollBody.translate3d(-t.curScrollTop + "px", 0, 0), t.scrollerHandle.translate3d(-(o * t.scrollSize) + "px", 0, 0), t.scrollerHandle.style.width = t.handleSize + "px") }, this.update(), this.addScrollTop = function (e) { this.scrollTopTemp += e, this.scrollTopTemp < 0 && (this.scrollTopTemp = 0), this.scrollTopTemp > this.scrollSize - this.clientSize && (this.scrollTopTemp = this.scrollSize - this.clientSize, this.onScrollEnd()), o = this.scrollTopTemp / (this.scrollSize - this.clientSize) }, this.toScrollTop = function (e) { this.scrollTopTemp = e, this.scrollTopTemp < 0 && (this.scrollTopTemp = 0), this.scrollTopTemp > this.scrollSize - this.clientSize && (this.scrollTopTemp = this.scrollSize - this.clientSize, this.onScrollEnd()), o = this.scrollTopTemp / (this.scrollSize - this.clientSize) } };